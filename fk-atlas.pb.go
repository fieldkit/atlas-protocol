// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fk-atlas.proto

/*
Package fk_atlas is a generated protocol buffer package.

It is generated from these files:
	fk-atlas.proto

It has these top-level messages:
	AtlasCommand
	AtlasReply
	WireAtlasQuery
	Error
	WireAtlasReply
*/
package fk_atlas

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SensorType int32

const (
	SensorType_PH   SensorType = 0
	SensorType_TEMP SensorType = 1
	SensorType_ORP  SensorType = 2
	SensorType_DO   SensorType = 3
	SensorType_EC   SensorType = 4
)

var SensorType_name = map[int32]string{
	0: "PH",
	1: "TEMP",
	2: "ORP",
	3: "DO",
	4: "EC",
}
var SensorType_value = map[string]int32{
	"PH":   0,
	"TEMP": 1,
	"ORP":  2,
	"DO":   3,
	"EC":   4,
}

func (x SensorType) String() string {
	return proto.EnumName(SensorType_name, int32(x))
}
func (SensorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type QueryType int32

const (
	QueryType_QUERY_NONE          QueryType = 0
	QueryType_QUERY_ATLAS_COMMAND QueryType = 1
)

var QueryType_name = map[int32]string{
	0: "QUERY_NONE",
	1: "QUERY_ATLAS_COMMAND",
}
var QueryType_value = map[string]int32{
	"QUERY_NONE":          0,
	"QUERY_ATLAS_COMMAND": 1,
}

func (x QueryType) String() string {
	return proto.EnumName(QueryType_name, int32(x))
}
func (QueryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ReplyType int32

const (
	ReplyType_REPLY_NONE          ReplyType = 0
	ReplyType_REPLY_RETRY         ReplyType = 1
	ReplyType_REPLY_ERROR         ReplyType = 2
	ReplyType_REPLY_ATLAS_COMMAND ReplyType = 3
)

var ReplyType_name = map[int32]string{
	0: "REPLY_NONE",
	1: "REPLY_RETRY",
	2: "REPLY_ERROR",
	3: "REPLY_ATLAS_COMMAND",
}
var ReplyType_value = map[string]int32{
	"REPLY_NONE":          0,
	"REPLY_RETRY":         1,
	"REPLY_ERROR":         2,
	"REPLY_ATLAS_COMMAND": 3,
}

func (x ReplyType) String() string {
	return proto.EnumName(ReplyType_name, int32(x))
}
func (ReplyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ErrorType int32

const (
	ErrorType_NONE       ErrorType = 0
	ErrorType_GENERAL    ErrorType = 1
	ErrorType_UNEXPECTED ErrorType = 2
)

var ErrorType_name = map[int32]string{
	0: "NONE",
	1: "GENERAL",
	2: "UNEXPECTED",
}
var ErrorType_value = map[string]int32{
	"NONE":       0,
	"GENERAL":    1,
	"UNEXPECTED": 2,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}
func (ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AtlasCommand struct {
	Sensor  SensorType `protobuf:"varint,1,opt,name=sensor,enum=fk_atlas.SensorType" json:"sensor,omitempty"`
	Command string     `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
}

func (m *AtlasCommand) Reset()                    { *m = AtlasCommand{} }
func (m *AtlasCommand) String() string            { return proto.CompactTextString(m) }
func (*AtlasCommand) ProtoMessage()               {}
func (*AtlasCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AtlasCommand) GetSensor() SensorType {
	if m != nil {
		return m.Sensor
	}
	return SensorType_PH
}

func (m *AtlasCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type AtlasReply struct {
	Sensor SensorType `protobuf:"varint,1,opt,name=sensor,enum=fk_atlas.SensorType" json:"sensor,omitempty"`
	Reply  string     `protobuf:"bytes,2,opt,name=reply" json:"reply,omitempty"`
}

func (m *AtlasReply) Reset()                    { *m = AtlasReply{} }
func (m *AtlasReply) String() string            { return proto.CompactTextString(m) }
func (*AtlasReply) ProtoMessage()               {}
func (*AtlasReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AtlasReply) GetSensor() SensorType {
	if m != nil {
		return m.Sensor
	}
	return SensorType_PH
}

func (m *AtlasReply) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

type WireAtlasQuery struct {
	Type         QueryType     `protobuf:"varint,1,opt,name=type,enum=fk_atlas.QueryType" json:"type,omitempty"`
	AtlasCommand *AtlasCommand `protobuf:"bytes,2,opt,name=atlasCommand" json:"atlasCommand,omitempty"`
}

func (m *WireAtlasQuery) Reset()                    { *m = WireAtlasQuery{} }
func (m *WireAtlasQuery) String() string            { return proto.CompactTextString(m) }
func (*WireAtlasQuery) ProtoMessage()               {}
func (*WireAtlasQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WireAtlasQuery) GetType() QueryType {
	if m != nil {
		return m.Type
	}
	return QueryType_QUERY_NONE
}

func (m *WireAtlasQuery) GetAtlasCommand() *AtlasCommand {
	if m != nil {
		return m.AtlasCommand
	}
	return nil
}

type Error struct {
	Type    ErrorType `protobuf:"varint,1,opt,name=type,enum=fk_atlas.ErrorType" json:"type,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Error) GetType() ErrorType {
	if m != nil {
		return m.Type
	}
	return ErrorType_NONE
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type WireAtlasReply struct {
	Type       ReplyType   `protobuf:"varint,1,opt,name=type,enum=fk_atlas.ReplyType" json:"type,omitempty"`
	Error      *Error      `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	AtlasReply *AtlasReply `protobuf:"bytes,3,opt,name=atlasReply" json:"atlasReply,omitempty"`
}

func (m *WireAtlasReply) Reset()                    { *m = WireAtlasReply{} }
func (m *WireAtlasReply) String() string            { return proto.CompactTextString(m) }
func (*WireAtlasReply) ProtoMessage()               {}
func (*WireAtlasReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WireAtlasReply) GetType() ReplyType {
	if m != nil {
		return m.Type
	}
	return ReplyType_REPLY_NONE
}

func (m *WireAtlasReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *WireAtlasReply) GetAtlasReply() *AtlasReply {
	if m != nil {
		return m.AtlasReply
	}
	return nil
}

func init() {
	proto.RegisterType((*AtlasCommand)(nil), "fk_atlas.AtlasCommand")
	proto.RegisterType((*AtlasReply)(nil), "fk_atlas.AtlasReply")
	proto.RegisterType((*WireAtlasQuery)(nil), "fk_atlas.WireAtlasQuery")
	proto.RegisterType((*Error)(nil), "fk_atlas.Error")
	proto.RegisterType((*WireAtlasReply)(nil), "fk_atlas.WireAtlasReply")
	proto.RegisterEnum("fk_atlas.SensorType", SensorType_name, SensorType_value)
	proto.RegisterEnum("fk_atlas.QueryType", QueryType_name, QueryType_value)
	proto.RegisterEnum("fk_atlas.ReplyType", ReplyType_name, ReplyType_value)
	proto.RegisterEnum("fk_atlas.ErrorType", ErrorType_name, ErrorType_value)
}

func init() { proto.RegisterFile("fk-atlas.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x5f, 0x8f, 0x9a, 0x40,
	0x14, 0xc5, 0x77, 0x40, 0x65, 0xb9, 0x6e, 0xd8, 0xc9, 0xac, 0x69, 0x79, 0xdc, 0x90, 0x34, 0xdd,
	0x90, 0xd6, 0x07, 0xbb, 0x49, 0x93, 0xbe, 0x11, 0x9c, 0xb4, 0x69, 0x14, 0xd8, 0x11, 0x6d, 0x7d,
	0x32, 0xb4, 0x1d, 0x9b, 0xc6, 0x3f, 0x90, 0x41, 0x1f, 0xf8, 0x22, 0xfd, 0xbc, 0xcd, 0x0c, 0x08,
	0x68, 0xe2, 0x43, 0x9f, 0xf4, 0xcc, 0x39, 0xf7, 0x77, 0xe7, 0xde, 0x09, 0x60, 0xad, 0x37, 0xef,
	0x93, 0xc3, 0x36, 0xc9, 0x87, 0x99, 0x48, 0x0f, 0x29, 0xb9, 0x5d, 0x6f, 0x56, 0x4a, 0x3b, 0x0b,
	0xb8, 0xf3, 0xe4, 0x1f, 0x3f, 0xdd, 0xed, 0x92, 0xfd, 0x2f, 0xf2, 0x0e, 0x7a, 0x39, 0xdf, 0xe7,
	0xa9, 0xb0, 0xd1, 0x23, 0x7a, 0xb2, 0x46, 0x83, 0xe1, 0x29, 0x3a, 0x9c, 0xa9, 0xf3, 0xb8, 0xc8,
	0x38, 0xab, 0x32, 0xc4, 0x06, 0xe3, 0x67, 0x59, 0x68, 0x6b, 0x8f, 0xe8, 0xc9, 0x64, 0x27, 0xe9,
	0x44, 0x00, 0x8a, 0xcb, 0x78, 0xb6, 0x2d, 0xfe, 0x93, 0x3a, 0x80, 0xae, 0x90, 0x65, 0x15, 0xb3,
	0x14, 0xce, 0x11, 0xac, 0x6f, 0x7f, 0x04, 0x57, 0xd4, 0x97, 0x23, 0x17, 0x05, 0x79, 0x0b, 0x9d,
	0x43, 0x91, 0xf1, 0x8a, 0xf9, 0xd0, 0x30, 0x95, 0xad, 0x90, 0x2a, 0x40, 0x3e, 0xc1, 0x5d, 0xd2,
	0x1a, 0x52, 0x71, 0xfb, 0xa3, 0x57, 0x4d, 0x41, 0x7b, 0x05, 0xec, 0x2c, 0xeb, 0x7c, 0x85, 0x2e,
	0x15, 0x22, 0x15, 0xd7, 0xbb, 0x29, 0xbb, 0xd5, 0xcd, 0x06, 0x63, 0xc7, 0xf3, 0x3c, 0xf9, 0xcd,
	0x4f, 0x4b, 0xa9, 0xa4, 0xf3, 0x17, 0xb5, 0x66, 0x28, 0x37, 0x73, 0x95, 0xaa, 0xec, 0x16, 0xf5,
	0x0d, 0x74, 0xb9, 0x6c, 0x54, 0x5d, 0xfe, 0xfe, 0xa2, 0x3f, 0x2b, 0x5d, 0xf2, 0x0c, 0x90, 0xd4,
	0x74, 0x5b, 0x57, 0xd9, 0xc1, 0xc5, 0xa0, 0xca, 0x63, 0xad, 0x9c, 0xfb, 0x11, 0xa0, 0x79, 0x07,
	0xd2, 0x03, 0x2d, 0xfa, 0x82, 0x6f, 0xc8, 0x2d, 0x74, 0x62, 0x3a, 0x8d, 0x30, 0x22, 0x06, 0xe8,
	0x21, 0x8b, 0xb0, 0x26, 0xad, 0x71, 0x88, 0x75, 0xf9, 0x4b, 0x7d, 0xdc, 0x71, 0x9f, 0xc1, 0xac,
	0x97, 0x4d, 0x2c, 0x80, 0x97, 0x39, 0x65, 0xcb, 0x55, 0x10, 0x06, 0x14, 0xdf, 0x90, 0xd7, 0xf0,
	0x50, 0x6a, 0x2f, 0x9e, 0x78, 0xb3, 0x95, 0x1f, 0x4e, 0xa7, 0x5e, 0x30, 0xc6, 0xc8, 0x5d, 0x80,
	0x59, 0x8f, 0x27, 0xab, 0x18, 0x8d, 0x26, 0x75, 0xd5, 0x3d, 0xf4, 0x4b, 0xcd, 0x68, 0xcc, 0x96,
	0x18, 0x35, 0x07, 0x94, 0xb1, 0x90, 0x61, 0x4d, 0x72, 0xcb, 0x83, 0x73, 0xae, 0xee, 0x8e, 0xc0,
	0xac, 0x1f, 0x43, 0xde, 0xbe, 0x22, 0xf6, 0xc1, 0xf8, 0x4c, 0x03, 0xca, 0xbc, 0x09, 0x46, 0xb2,
	0xdd, 0x3c, 0xa0, 0xdf, 0x23, 0xea, 0xc7, 0x74, 0x8c, 0xb5, 0x1f, 0x3d, 0xf5, 0x45, 0x7c, 0xf8,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xab, 0xa0, 0x6b, 0x23, 0x03, 0x00, 0x00,
}
