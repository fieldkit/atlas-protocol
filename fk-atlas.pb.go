// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fk-atlas.proto

package fk_atlas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SensorType int32

const (
	SensorType_SENSOR_NONE SensorType = 0
	SensorType_SENSOR_PH   SensorType = 1
	SensorType_SENSOR_TEMP SensorType = 2
	SensorType_SENSOR_ORP  SensorType = 3
	SensorType_SENSOR_DO   SensorType = 4
	SensorType_SENSOR_EC   SensorType = 5
)

var SensorType_name = map[int32]string{
	0: "SENSOR_NONE",
	1: "SENSOR_PH",
	2: "SENSOR_TEMP",
	3: "SENSOR_ORP",
	4: "SENSOR_DO",
	5: "SENSOR_EC",
}

var SensorType_value = map[string]int32{
	"SENSOR_NONE": 0,
	"SENSOR_PH":   1,
	"SENSOR_TEMP": 2,
	"SENSOR_ORP":  3,
	"SENSOR_DO":   4,
	"SENSOR_EC":   5,
}

func (x SensorType) String() string {
	return proto.EnumName(SensorType_name, int32(x))
}

func (SensorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{0}
}

type QueryType int32

const (
	QueryType_QUERY_NONE QueryType = 0
)

var QueryType_name = map[int32]string{
	0: "QUERY_NONE",
}

var QueryType_value = map[string]int32{
	"QUERY_NONE": 0,
}

func (x QueryType) String() string {
	return proto.EnumName(QueryType_name, int32(x))
}

func (QueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{1}
}

type CalibrationOperation int32

const (
	CalibrationOperation_CALIBRATION_NONE   CalibrationOperation = 0
	CalibrationOperation_CALIBRATION_STATUS CalibrationOperation = 1
	CalibrationOperation_CALIBRATION_CLEAR  CalibrationOperation = 2
	CalibrationOperation_CALIBRATION_SET    CalibrationOperation = 3
)

var CalibrationOperation_name = map[int32]string{
	0: "CALIBRATION_NONE",
	1: "CALIBRATION_STATUS",
	2: "CALIBRATION_CLEAR",
	3: "CALIBRATION_SET",
}

var CalibrationOperation_value = map[string]int32{
	"CALIBRATION_NONE":   0,
	"CALIBRATION_STATUS": 1,
	"CALIBRATION_CLEAR":  2,
	"CALIBRATION_SET":    3,
}

func (x CalibrationOperation) String() string {
	return proto.EnumName(CalibrationOperation_name, int32(x))
}

func (CalibrationOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{2}
}

type TempCalibrations int32

const (
	TempCalibrations_TEMP_NONE   TempCalibrations = 0
	TempCalibrations_TEMP_SINGLE TempCalibrations = 1
)

var TempCalibrations_name = map[int32]string{
	0: "TEMP_NONE",
	1: "TEMP_SINGLE",
}

var TempCalibrations_value = map[string]int32{
	"TEMP_NONE":   0,
	"TEMP_SINGLE": 1,
}

func (x TempCalibrations) String() string {
	return proto.EnumName(TempCalibrations_name, int32(x))
}

func (TempCalibrations) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{3}
}

type DoCalibrations int32

const (
	DoCalibrations_DO_NONE       DoCalibrations = 0
	DoCalibrations_DO_ATMOSPHERE DoCalibrations = 1
	DoCalibrations_DO_ZERO       DoCalibrations = 2
)

var DoCalibrations_name = map[int32]string{
	0: "DO_NONE",
	1: "DO_ATMOSPHERE",
	2: "DO_ZERO",
}

var DoCalibrations_value = map[string]int32{
	"DO_NONE":       0,
	"DO_ATMOSPHERE": 1,
	"DO_ZERO":       2,
}

func (x DoCalibrations) String() string {
	return proto.EnumName(DoCalibrations_name, int32(x))
}

func (DoCalibrations) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{4}
}

type PhCalibrations int32

const (
	PhCalibrations_PH_NONE   PhCalibrations = 0
	PhCalibrations_PH_LOW    PhCalibrations = 1
	PhCalibrations_PH_MIDDLE PhCalibrations = 2
	PhCalibrations_PH_HIGH   PhCalibrations = 4
)

var PhCalibrations_name = map[int32]string{
	0: "PH_NONE",
	1: "PH_LOW",
	2: "PH_MIDDLE",
	4: "PH_HIGH",
}

var PhCalibrations_value = map[string]int32{
	"PH_NONE":   0,
	"PH_LOW":    1,
	"PH_MIDDLE": 2,
	"PH_HIGH":   4,
}

func (x PhCalibrations) String() string {
	return proto.EnumName(PhCalibrations_name, int32(x))
}

func (PhCalibrations) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{5}
}

type EcCalibrations int32

const (
	EcCalibrations_EC_NONE      EcCalibrations = 0
	EcCalibrations_EC_DRY       EcCalibrations = 1
	EcCalibrations_EC_SINGLE    EcCalibrations = 2
	EcCalibrations_EC_DUAL_LOW  EcCalibrations = 4
	EcCalibrations_EC_DUAL_HIGH EcCalibrations = 8
)

var EcCalibrations_name = map[int32]string{
	0: "EC_NONE",
	1: "EC_DRY",
	2: "EC_SINGLE",
	4: "EC_DUAL_LOW",
	8: "EC_DUAL_HIGH",
}

var EcCalibrations_value = map[string]int32{
	"EC_NONE":      0,
	"EC_DRY":       1,
	"EC_SINGLE":    2,
	"EC_DUAL_LOW":  4,
	"EC_DUAL_HIGH": 8,
}

func (x EcCalibrations) String() string {
	return proto.EnumName(EcCalibrations_name, int32(x))
}

func (EcCalibrations) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{6}
}

type OrpCalibrations int32

const (
	OrpCalibrations_ORP_NONE   OrpCalibrations = 0
	OrpCalibrations_ORP_SINGLE OrpCalibrations = 1
)

var OrpCalibrations_name = map[int32]string{
	0: "ORP_NONE",
	1: "ORP_SINGLE",
}

var OrpCalibrations_value = map[string]int32{
	"ORP_NONE":   0,
	"ORP_SINGLE": 1,
}

func (x OrpCalibrations) String() string {
	return proto.EnumName(OrpCalibrations_name, int32(x))
}

func (OrpCalibrations) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{7}
}

type ReplyType int32

const (
	ReplyType_REPLY_NONE    ReplyType = 0
	ReplyType_REPLY_RETRY   ReplyType = 1
	ReplyType_REPLY_ERROR   ReplyType = 2
	ReplyType_REPLY_STATUS  ReplyType = 3
	ReplyType_REPLY_COMMAND ReplyType = 4
)

var ReplyType_name = map[int32]string{
	0: "REPLY_NONE",
	1: "REPLY_RETRY",
	2: "REPLY_ERROR",
	3: "REPLY_STATUS",
	4: "REPLY_COMMAND",
}

var ReplyType_value = map[string]int32{
	"REPLY_NONE":    0,
	"REPLY_RETRY":   1,
	"REPLY_ERROR":   2,
	"REPLY_STATUS":  3,
	"REPLY_COMMAND": 4,
}

func (x ReplyType) String() string {
	return proto.EnumName(ReplyType_name, int32(x))
}

func (ReplyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{8}
}

type ErrorType int32

const (
	ErrorType_NONE       ErrorType = 0
	ErrorType_GENERAL    ErrorType = 1
	ErrorType_UNEXPECTED ErrorType = 2
)

var ErrorType_name = map[int32]string{
	0: "NONE",
	1: "GENERAL",
	2: "UNEXPECTED",
}

var ErrorType_value = map[string]int32{
	"NONE":       0,
	"GENERAL":    1,
	"UNEXPECTED": 2,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}

func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{9}
}

type AtlasCalibrationCommand struct {
	Operation            CalibrationOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=fk_atlas.CalibrationOperation" json:"operation,omitempty"`
	Temp                 TempCalibrations     `protobuf:"varint,2,opt,name=temp,proto3,enum=fk_atlas.TempCalibrations" json:"temp,omitempty"`
	DissolvedOxygen      DoCalibrations       `protobuf:"varint,3,opt,name=dissolvedOxygen,proto3,enum=fk_atlas.DoCalibrations" json:"dissolvedOxygen,omitempty"`
	Ph                   PhCalibrations       `protobuf:"varint,4,opt,name=ph,proto3,enum=fk_atlas.PhCalibrations" json:"ph,omitempty"`
	Ec                   EcCalibrations       `protobuf:"varint,5,opt,name=ec,proto3,enum=fk_atlas.EcCalibrations" json:"ec,omitempty"`
	Orp                  OrpCalibrations      `protobuf:"varint,6,opt,name=orp,proto3,enum=fk_atlas.OrpCalibrations" json:"orp,omitempty"`
	Which                uint32               `protobuf:"varint,8,opt,name=which,proto3" json:"which,omitempty"`
	Value                float32              `protobuf:"fixed32,7,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AtlasCalibrationCommand) Reset()         { *m = AtlasCalibrationCommand{} }
func (m *AtlasCalibrationCommand) String() string { return proto.CompactTextString(m) }
func (*AtlasCalibrationCommand) ProtoMessage()    {}
func (*AtlasCalibrationCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{0}
}

func (m *AtlasCalibrationCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtlasCalibrationCommand.Unmarshal(m, b)
}
func (m *AtlasCalibrationCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtlasCalibrationCommand.Marshal(b, m, deterministic)
}
func (m *AtlasCalibrationCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtlasCalibrationCommand.Merge(m, src)
}
func (m *AtlasCalibrationCommand) XXX_Size() int {
	return xxx_messageInfo_AtlasCalibrationCommand.Size(m)
}
func (m *AtlasCalibrationCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_AtlasCalibrationCommand.DiscardUnknown(m)
}

var xxx_messageInfo_AtlasCalibrationCommand proto.InternalMessageInfo

func (m *AtlasCalibrationCommand) GetOperation() CalibrationOperation {
	if m != nil {
		return m.Operation
	}
	return CalibrationOperation_CALIBRATION_NONE
}

func (m *AtlasCalibrationCommand) GetTemp() TempCalibrations {
	if m != nil {
		return m.Temp
	}
	return TempCalibrations_TEMP_NONE
}

func (m *AtlasCalibrationCommand) GetDissolvedOxygen() DoCalibrations {
	if m != nil {
		return m.DissolvedOxygen
	}
	return DoCalibrations_DO_NONE
}

func (m *AtlasCalibrationCommand) GetPh() PhCalibrations {
	if m != nil {
		return m.Ph
	}
	return PhCalibrations_PH_NONE
}

func (m *AtlasCalibrationCommand) GetEc() EcCalibrations {
	if m != nil {
		return m.Ec
	}
	return EcCalibrations_EC_NONE
}

func (m *AtlasCalibrationCommand) GetOrp() OrpCalibrations {
	if m != nil {
		return m.Orp
	}
	return OrpCalibrations_ORP_NONE
}

func (m *AtlasCalibrationCommand) GetWhich() uint32 {
	if m != nil {
		return m.Which
	}
	return 0
}

func (m *AtlasCalibrationCommand) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TwoWireQuery struct {
	Read                 uint32   `protobuf:"varint,1,opt,name=read,proto3" json:"read,omitempty"`
	Write                uint32   `protobuf:"varint,2,opt,name=write,proto3" json:"write,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TwoWireQuery) Reset()         { *m = TwoWireQuery{} }
func (m *TwoWireQuery) String() string { return proto.CompactTextString(m) }
func (*TwoWireQuery) ProtoMessage()    {}
func (*TwoWireQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{1}
}

func (m *TwoWireQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TwoWireQuery.Unmarshal(m, b)
}
func (m *TwoWireQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TwoWireQuery.Marshal(b, m, deterministic)
}
func (m *TwoWireQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoWireQuery.Merge(m, src)
}
func (m *TwoWireQuery) XXX_Size() int {
	return xxx_messageInfo_TwoWireQuery.Size(m)
}
func (m *TwoWireQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoWireQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TwoWireQuery proto.InternalMessageInfo

func (m *TwoWireQuery) GetRead() uint32 {
	if m != nil {
		return m.Read
	}
	return 0
}

func (m *TwoWireQuery) GetWrite() uint32 {
	if m != nil {
		return m.Write
	}
	return 0
}

func (m *TwoWireQuery) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WireAtlasQuery struct {
	Type                 QueryType                `protobuf:"varint,1,opt,name=type,proto3,enum=fk_atlas.QueryType" json:"type,omitempty"`
	Calibration          *AtlasCalibrationCommand `protobuf:"bytes,2,opt,name=calibration,proto3" json:"calibration,omitempty"`
	Wire                 *TwoWireQuery            `protobuf:"bytes,3,opt,name=wire,proto3" json:"wire,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *WireAtlasQuery) Reset()         { *m = WireAtlasQuery{} }
func (m *WireAtlasQuery) String() string { return proto.CompactTextString(m) }
func (*WireAtlasQuery) ProtoMessage()    {}
func (*WireAtlasQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{2}
}

func (m *WireAtlasQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WireAtlasQuery.Unmarshal(m, b)
}
func (m *WireAtlasQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WireAtlasQuery.Marshal(b, m, deterministic)
}
func (m *WireAtlasQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WireAtlasQuery.Merge(m, src)
}
func (m *WireAtlasQuery) XXX_Size() int {
	return xxx_messageInfo_WireAtlasQuery.Size(m)
}
func (m *WireAtlasQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_WireAtlasQuery.DiscardUnknown(m)
}

var xxx_messageInfo_WireAtlasQuery proto.InternalMessageInfo

func (m *WireAtlasQuery) GetType() QueryType {
	if m != nil {
		return m.Type
	}
	return QueryType_QUERY_NONE
}

func (m *WireAtlasQuery) GetCalibration() *AtlasCalibrationCommand {
	if m != nil {
		return m.Calibration
	}
	return nil
}

func (m *WireAtlasQuery) GetWire() *TwoWireQuery {
	if m != nil {
		return m.Wire
	}
	return nil
}

type AtlasCalibrationStatus struct {
	Type                 SensorType       `protobuf:"varint,1,opt,name=type,proto3,enum=fk_atlas.SensorType" json:"type,omitempty"`
	Time                 uint32           `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Raw                  uint32           `protobuf:"varint,8,opt,name=raw,proto3" json:"raw,omitempty"`
	Temp                 TempCalibrations `protobuf:"varint,3,opt,name=temp,proto3,enum=fk_atlas.TempCalibrations" json:"temp,omitempty"`
	DissolvedOxygen      DoCalibrations   `protobuf:"varint,4,opt,name=dissolvedOxygen,proto3,enum=fk_atlas.DoCalibrations" json:"dissolvedOxygen,omitempty"`
	Ph                   PhCalibrations   `protobuf:"varint,5,opt,name=ph,proto3,enum=fk_atlas.PhCalibrations" json:"ph,omitempty"`
	Ec                   EcCalibrations   `protobuf:"varint,6,opt,name=ec,proto3,enum=fk_atlas.EcCalibrations" json:"ec,omitempty"`
	Orp                  OrpCalibrations  `protobuf:"varint,7,opt,name=orp,proto3,enum=fk_atlas.OrpCalibrations" json:"orp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AtlasCalibrationStatus) Reset()         { *m = AtlasCalibrationStatus{} }
func (m *AtlasCalibrationStatus) String() string { return proto.CompactTextString(m) }
func (*AtlasCalibrationStatus) ProtoMessage()    {}
func (*AtlasCalibrationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{3}
}

func (m *AtlasCalibrationStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtlasCalibrationStatus.Unmarshal(m, b)
}
func (m *AtlasCalibrationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtlasCalibrationStatus.Marshal(b, m, deterministic)
}
func (m *AtlasCalibrationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtlasCalibrationStatus.Merge(m, src)
}
func (m *AtlasCalibrationStatus) XXX_Size() int {
	return xxx_messageInfo_AtlasCalibrationStatus.Size(m)
}
func (m *AtlasCalibrationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AtlasCalibrationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AtlasCalibrationStatus proto.InternalMessageInfo

func (m *AtlasCalibrationStatus) GetType() SensorType {
	if m != nil {
		return m.Type
	}
	return SensorType_SENSOR_NONE
}

func (m *AtlasCalibrationStatus) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *AtlasCalibrationStatus) GetRaw() uint32 {
	if m != nil {
		return m.Raw
	}
	return 0
}

func (m *AtlasCalibrationStatus) GetTemp() TempCalibrations {
	if m != nil {
		return m.Temp
	}
	return TempCalibrations_TEMP_NONE
}

func (m *AtlasCalibrationStatus) GetDissolvedOxygen() DoCalibrations {
	if m != nil {
		return m.DissolvedOxygen
	}
	return DoCalibrations_DO_NONE
}

func (m *AtlasCalibrationStatus) GetPh() PhCalibrations {
	if m != nil {
		return m.Ph
	}
	return PhCalibrations_PH_NONE
}

func (m *AtlasCalibrationStatus) GetEc() EcCalibrations {
	if m != nil {
		return m.Ec
	}
	return EcCalibrations_EC_NONE
}

func (m *AtlasCalibrationStatus) GetOrp() OrpCalibrations {
	if m != nil {
		return m.Orp
	}
	return OrpCalibrations_ORP_NONE
}

type TwoWireReply struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TwoWireReply) Reset()         { *m = TwoWireReply{} }
func (m *TwoWireReply) String() string { return proto.CompactTextString(m) }
func (*TwoWireReply) ProtoMessage()    {}
func (*TwoWireReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{4}
}

func (m *TwoWireReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TwoWireReply.Unmarshal(m, b)
}
func (m *TwoWireReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TwoWireReply.Marshal(b, m, deterministic)
}
func (m *TwoWireReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoWireReply.Merge(m, src)
}
func (m *TwoWireReply) XXX_Size() int {
	return xxx_messageInfo_TwoWireReply.Size(m)
}
func (m *TwoWireReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoWireReply.DiscardUnknown(m)
}

var xxx_messageInfo_TwoWireReply proto.InternalMessageInfo

func (m *TwoWireReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Error struct {
	Type                 ErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=fk_atlas.ErrorType" json:"type,omitempty"`
	Message              string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{5}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetType() ErrorType {
	if m != nil {
		return m.Type
	}
	return ErrorType_NONE
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type WireAtlasReply struct {
	Type                 ReplyType               `protobuf:"varint,1,opt,name=type,proto3,enum=fk_atlas.ReplyType" json:"type,omitempty"`
	Errors               []*Error                `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Calibration          *AtlasCalibrationStatus `protobuf:"bytes,3,opt,name=calibration,proto3" json:"calibration,omitempty"`
	Wire                 *TwoWireReply           `protobuf:"bytes,4,opt,name=wire,proto3" json:"wire,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *WireAtlasReply) Reset()         { *m = WireAtlasReply{} }
func (m *WireAtlasReply) String() string { return proto.CompactTextString(m) }
func (*WireAtlasReply) ProtoMessage()    {}
func (*WireAtlasReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_822d05f6175684bb, []int{6}
}

func (m *WireAtlasReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WireAtlasReply.Unmarshal(m, b)
}
func (m *WireAtlasReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WireAtlasReply.Marshal(b, m, deterministic)
}
func (m *WireAtlasReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WireAtlasReply.Merge(m, src)
}
func (m *WireAtlasReply) XXX_Size() int {
	return xxx_messageInfo_WireAtlasReply.Size(m)
}
func (m *WireAtlasReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WireAtlasReply.DiscardUnknown(m)
}

var xxx_messageInfo_WireAtlasReply proto.InternalMessageInfo

func (m *WireAtlasReply) GetType() ReplyType {
	if m != nil {
		return m.Type
	}
	return ReplyType_REPLY_NONE
}

func (m *WireAtlasReply) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *WireAtlasReply) GetCalibration() *AtlasCalibrationStatus {
	if m != nil {
		return m.Calibration
	}
	return nil
}

func (m *WireAtlasReply) GetWire() *TwoWireReply {
	if m != nil {
		return m.Wire
	}
	return nil
}

func init() {
	proto.RegisterEnum("fk_atlas.SensorType", SensorType_name, SensorType_value)
	proto.RegisterEnum("fk_atlas.QueryType", QueryType_name, QueryType_value)
	proto.RegisterEnum("fk_atlas.CalibrationOperation", CalibrationOperation_name, CalibrationOperation_value)
	proto.RegisterEnum("fk_atlas.TempCalibrations", TempCalibrations_name, TempCalibrations_value)
	proto.RegisterEnum("fk_atlas.DoCalibrations", DoCalibrations_name, DoCalibrations_value)
	proto.RegisterEnum("fk_atlas.PhCalibrations", PhCalibrations_name, PhCalibrations_value)
	proto.RegisterEnum("fk_atlas.EcCalibrations", EcCalibrations_name, EcCalibrations_value)
	proto.RegisterEnum("fk_atlas.OrpCalibrations", OrpCalibrations_name, OrpCalibrations_value)
	proto.RegisterEnum("fk_atlas.ReplyType", ReplyType_name, ReplyType_value)
	proto.RegisterEnum("fk_atlas.ErrorType", ErrorType_name, ErrorType_value)
	proto.RegisterType((*AtlasCalibrationCommand)(nil), "fk_atlas.AtlasCalibrationCommand")
	proto.RegisterType((*TwoWireQuery)(nil), "fk_atlas.TwoWireQuery")
	proto.RegisterType((*WireAtlasQuery)(nil), "fk_atlas.WireAtlasQuery")
	proto.RegisterType((*AtlasCalibrationStatus)(nil), "fk_atlas.AtlasCalibrationStatus")
	proto.RegisterType((*TwoWireReply)(nil), "fk_atlas.TwoWireReply")
	proto.RegisterType((*Error)(nil), "fk_atlas.Error")
	proto.RegisterType((*WireAtlasReply)(nil), "fk_atlas.WireAtlasReply")
}

func init() { proto.RegisterFile("fk-atlas.proto", fileDescriptor_822d05f6175684bb) }

var fileDescriptor_822d05f6175684bb = []byte{
	// 862 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x8e, 0xe2, 0x46,
	0x10, 0x8e, 0x8d, 0xf9, 0x2b, 0x18, 0xe8, 0xed, 0x9d, 0x4c, 0x9c, 0x44, 0x8a, 0x08, 0x97, 0x45,
	0x8e, 0x32, 0x91, 0xc8, 0x35, 0x39, 0x78, 0xec, 0xd6, 0x40, 0x64, 0xb0, 0xb7, 0xf1, 0x68, 0x33,
	0xc9, 0x01, 0x79, 0xa0, 0x77, 0x41, 0x03, 0x63, 0xcb, 0xf6, 0x2c, 0xe1, 0x95, 0xf2, 0x38, 0xb9,
	0xe7, 0x3d, 0x72, 0x8c, 0xba, 0xfd, 0x8f, 0x16, 0x69, 0xb4, 0xb7, 0xae, 0xaa, 0xef, 0xab, 0xaa,
	0xae, 0xfe, 0xca, 0x32, 0xf4, 0xde, 0x3f, 0xfe, 0xe8, 0xc5, 0x3b, 0x2f, 0xba, 0x0e, 0x42, 0x3f,
	0xf6, 0x71, 0xeb, 0xfd, 0xe3, 0x52, 0xd8, 0xc3, 0xff, 0x64, 0xf8, 0x4a, 0xe7, 0x27, 0xc3, 0xdb,
	0x6d, 0x1f, 0x42, 0x2f, 0xde, 0xfa, 0x4f, 0x86, 0xbf, 0xdf, 0x7b, 0x4f, 0x6b, 0xfc, 0x0b, 0xb4,
	0xfd, 0x80, 0x25, 0x3e, 0x55, 0x1a, 0x48, 0xa3, 0xde, 0xf8, 0xbb, 0xeb, 0x8c, 0x79, 0x5d, 0x22,
	0xd8, 0x19, 0x8a, 0x16, 0x04, 0x7c, 0x0d, 0x4a, 0xcc, 0xf6, 0x81, 0x2a, 0x0b, 0xe2, 0x37, 0x05,
	0xd1, 0x65, 0xfb, 0xa0, 0x44, 0x8e, 0xa8, 0xc0, 0xe1, 0x1b, 0xe8, 0xaf, 0xb7, 0x51, 0xe4, 0xef,
	0x3e, 0xb2, 0xb5, 0xfd, 0xd7, 0xf1, 0x03, 0x7b, 0x52, 0x6b, 0x82, 0xaa, 0x16, 0x54, 0xd3, 0xaf,
	0x10, 0x4f, 0x09, 0x78, 0x04, 0x72, 0xb0, 0x51, 0x95, 0x53, 0x9a, 0xb3, 0xa9, 0xd0, 0xe4, 0x60,
	0xc3, 0x91, 0x6c, 0xa5, 0xd6, 0x4f, 0x91, 0x64, 0x55, 0x45, 0xb2, 0x15, 0xfe, 0x01, 0x6a, 0x7e,
	0x18, 0xa8, 0x0d, 0x01, 0xfd, 0xba, 0x80, 0xda, 0x61, 0xf5, 0x16, 0x1c, 0x85, 0x2f, 0xa1, 0x7e,
	0xd8, 0x6c, 0x57, 0x1b, 0xb5, 0x35, 0x90, 0x46, 0x17, 0x34, 0x31, 0xb8, 0xf7, 0xa3, 0xb7, 0x7b,
	0x66, 0x6a, 0x73, 0x20, 0x8d, 0x64, 0x9a, 0x18, 0x43, 0x0b, 0xba, 0xee, 0xc1, 0x7f, 0xb7, 0x0d,
	0xd9, 0xdb, 0x67, 0x16, 0x1e, 0x31, 0x06, 0x25, 0x64, 0xde, 0x5a, 0x4c, 0xfa, 0x82, 0x8a, 0xb3,
	0xc8, 0x17, 0x6e, 0x63, 0x26, 0xa6, 0xc8, 0xf3, 0x71, 0x83, 0x23, 0xd7, 0x5e, 0xec, 0x89, 0xf9,
	0x74, 0xa9, 0x38, 0x0f, 0xff, 0x96, 0xa0, 0xc7, 0x73, 0x89, 0xc7, 0x4c, 0x12, 0xbe, 0x01, 0x25,
	0x3e, 0x06, 0x2c, 0x7d, 0xba, 0xd7, 0x45, 0xeb, 0x22, 0xec, 0x1e, 0x03, 0x46, 0x05, 0x00, 0x1b,
	0xd0, 0x59, 0x15, 0x57, 0x11, 0xb5, 0x3a, 0xe3, 0xef, 0x0b, 0xfc, 0x19, 0x81, 0xd0, 0x32, 0x0b,
	0x6b, 0xa0, 0x1c, 0xb6, 0x21, 0x13, 0x4d, 0x75, 0xc6, 0x57, 0xa5, 0xf7, 0x2e, 0x5d, 0x92, 0x0a,
	0xcc, 0xf0, 0x5f, 0x19, 0xae, 0x4e, 0x93, 0x2e, 0x62, 0x2f, 0x7e, 0x8e, 0xf0, 0xa8, 0xd2, 0xf4,
	0x65, 0x91, 0x66, 0xc1, 0x9e, 0x22, 0x3f, 0x2c, 0x75, 0x8d, 0x41, 0x89, 0xb7, 0xfb, 0x6c, 0x34,
	0xe2, 0x8c, 0x11, 0xd4, 0x42, 0xef, 0x90, 0x4e, 0x9f, 0x1f, 0x73, 0x19, 0xd6, 0x3e, 0x5f, 0x86,
	0xca, 0xe7, 0xc9, 0xb0, 0xfe, 0x62, 0x19, 0x36, 0x5e, 0x2e, 0xc3, 0xe6, 0x4b, 0x64, 0x38, 0x1c,
	0xe6, 0xd2, 0xa2, 0x2c, 0xd8, 0x1d, 0x73, 0xc1, 0x48, 0x25, 0xc1, 0xfc, 0x06, 0x75, 0x12, 0x86,
	0x7e, 0x78, 0x5e, 0x26, 0x22, 0x5c, 0x1a, 0xb8, 0x0a, 0xcd, 0x3d, 0x8b, 0x22, 0xef, 0x43, 0x32,
	0xf3, 0x36, 0xcd, 0xcc, 0xe1, 0x3f, 0x65, 0xf1, 0x25, 0x25, 0xcf, 0x66, 0x15, 0xe1, 0x52, 0xd6,
	0x37, 0xd0, 0x60, 0xbc, 0x50, 0xa4, 0xca, 0x83, 0xda, 0xa8, 0x33, 0xee, 0x9f, 0x34, 0x40, 0xd3,
	0x30, 0xbe, 0xa9, 0xaa, 0x34, 0xd1, 0xd9, 0xe0, 0xbc, 0x4a, 0x13, 0x41, 0x7d, 0x5a, 0xa4, 0xca,
	0x19, 0x91, 0x8a, 0xe6, 0x12, 0x91, 0x6a, 0x8f, 0x00, 0x85, 0xe6, 0x70, 0x1f, 0x3a, 0x0b, 0x32,
	0x5f, 0xd8, 0x74, 0x39, 0xb7, 0xe7, 0x04, 0x7d, 0x81, 0x2f, 0xa0, 0x9d, 0x3a, 0x9c, 0x09, 0x92,
	0x4a, 0x71, 0x97, 0xcc, 0x1c, 0x24, 0xe3, 0x1e, 0x40, 0xea, 0xb0, 0xa9, 0x83, 0x6a, 0x25, 0xbc,
	0x69, 0x23, 0xa5, 0x64, 0x12, 0x03, 0xd5, 0xb5, 0x6f, 0xa1, 0x9d, 0x6f, 0x25, 0xa7, 0xbe, 0xbd,
	0x23, 0xf4, 0x3e, 0x2d, 0xa5, 0x05, 0x70, 0xf9, 0xa9, 0xaf, 0x2d, 0xbe, 0x04, 0x64, 0xe8, 0xd6,
	0xf4, 0x86, 0xea, 0xee, 0xd4, 0x9e, 0x67, 0x8d, 0x5d, 0x01, 0x2e, 0x7b, 0x17, 0xae, 0xee, 0xde,
	0x2d, 0x90, 0x84, 0xbf, 0x84, 0x57, 0x65, 0xbf, 0x61, 0x11, 0x9d, 0x22, 0x19, 0xbf, 0x86, 0x7e,
	0x05, 0x4e, 0x5c, 0x54, 0xd3, 0xc6, 0x80, 0x4e, 0xf7, 0x83, 0x77, 0xcc, 0xaf, 0x96, 0x95, 0xe9,
	0x43, 0x47, 0x98, 0x8b, 0xe9, 0xfc, 0xd6, 0x22, 0x48, 0xd2, 0x7e, 0x85, 0x5e, 0x75, 0x31, 0x70,
	0x07, 0x9a, 0xa6, 0x9d, 0xe1, 0x5f, 0xc1, 0x85, 0x69, 0x2f, 0x75, 0x77, 0x66, 0x2f, 0x9c, 0x09,
	0xa1, 0x04, 0x49, 0x69, 0xfc, 0x0f, 0x42, 0x6d, 0x24, 0x6b, 0x04, 0x7a, 0xd5, 0x05, 0xe1, 0x61,
	0x67, 0x92, 0xd1, 0x01, 0x1a, 0xce, 0x64, 0x69, 0xd9, 0xef, 0x90, 0xc4, 0x3b, 0x71, 0x26, 0xcb,
	0xd9, 0xd4, 0x34, 0x2d, 0x82, 0xe4, 0x14, 0x37, 0x99, 0xde, 0x4e, 0x90, 0xa2, 0xfd, 0x09, 0xbd,
	0xea, 0xf6, 0xf0, 0x30, 0x31, 0x4a, 0x69, 0x88, 0xb1, 0x34, 0xe9, 0x7d, 0x92, 0x86, 0x18, 0x59,
	0xff, 0x32, 0xbf, 0x10, 0x0f, 0xdd, 0xe9, 0x96, 0x28, 0xa3, 0x60, 0x04, 0xdd, 0xcc, 0x21, 0x92,
	0xb7, 0xb4, 0x9f, 0xa0, 0x7f, 0xb2, 0x6f, 0xb8, 0x0b, 0x2d, 0x9b, 0xe6, 0x43, 0xe9, 0x01, 0x70,
	0x2b, 0x9f, 0xc9, 0x03, 0xb4, 0x73, 0xbd, 0xf3, 0x20, 0x25, 0x8e, 0x75, 0x5f, 0x9a, 0x60, 0x62,
	0x53, 0xe2, 0x8a, 0x86, 0x72, 0x07, 0xa1, 0xd4, 0xe6, 0x6f, 0x83, 0xa0, 0x9b, 0x38, 0xd2, 0x47,
	0xac, 0xf1, 0x29, 0x26, 0x1e, 0xc3, 0x9e, 0xcd, 0xf4, 0xb9, 0x89, 0x14, 0x6d, 0x0c, 0xed, 0x7c,
	0x53, 0x71, 0x0b, 0x94, 0x34, 0x7b, 0x07, 0x9a, 0xb7, 0x64, 0x4e, 0xa8, 0x6e, 0x21, 0x89, 0x97,
	0xbe, 0x9b, 0x93, 0xdf, 0x1d, 0x62, 0xb8, 0xc4, 0x44, 0xf2, 0x43, 0x43, 0xfc, 0x07, 0xfc, 0xfc,
	0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x2a, 0x3f, 0xea, 0x19, 0x08, 0x00, 0x00,
}
